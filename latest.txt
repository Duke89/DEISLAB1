//<------------------EXPERIMENT1------------------>

	//X AND Y AVERAGE ARRAY
	double xArray[20];
	double yArray[20];

	//TEST SET
	double testSetX[10];
	double testSetY[10];

	//TRAINSET
	double trainSetX[10];
	double trainSetY[10];

	//20objects
	for(int i = 0; i < (int)gesturesData.size(); i++){
		double avgx = 0.0;
		double avgy = 0.0;
		//printf("<--------------DATA%d-------------->\n",i+1);
		//10objects
		for(int j = 0; j < (int)gesturesData.at(i).size(); j++){
			//at(1-20) | at(1-10) | at(1-2)
			//TIMESTAMPS | DATA FOR X/Y | X or Y
			//printf("X: %f Y: %f\n",gesturesData.at(i).at(j).at(0), gesturesData.at(i).at(j).at(1));
			avgx += gesturesData.at(i).at(j).at(0);
			avgy += gesturesData.at(i).at(j).at(1);
		}

		//calculate average
		avgx = avgx/10;
		xArray[i] = avgx;

		avgy = avgy/10;
		yArray[i] = avgy;

		//print average
		//printf("Average X: %f\n",avgx);
		//printf("Average Y: %f\n",avgy);
	}

	//<------------------EXPERIMENT2------------------>
	int countTrain = 0;
	int countTest = 0;
	for(int i = 0; i<20; i++)
	{
		if(i>4 && i<10)
		{
			trainSetX[countTrain] =xArray[i];
			trainSetY[countTrain] =yArray[i];
			countTrain++;
		}
		else if(i>14 && i<20)
		{
			trainSetX[countTrain] =xArray[i];
			trainSetY[countTrain] =yArray[i];
			countTrain++;
		}
		else
		{
			testSetX[countTest] = xArray[i];
			testSetY[countTest] = yArray[i];
			countTest++;
		}
	}

	//<------------------EXPERIMENT3------------------>
	double euDist[19];
	double sort[19];
	int correct = 0;
	//CURRENTLY HERE ???
	for(int i = 0; i<10; i++)
	{
		printf("<------------------EUCLIDEAN------------------>\n");
		for(int j = i+1; j<20; j++)
		{
			euDist[j-1] = sqrt( pow(xArray[j]-testSetX[i],2) + pow(yArray[j]-testSetY[i],2));
			printf("%f\n",euDist[j-1]);
		}

		memcpy(sort,euDist,sizeof(euDist));
		double min = 0;
		
		printf("<------------------COPY------------------>\n");
		for(int f = 0; f<19; f++)
		{
			printf("%f\n",sort[f]);
		}

		//printf("<------------------SORTING------------------>\n");
		for(int k = 0; k<19; k++)
		{
			for(int l = k+1; l<19; l++)
			{
				if(sort[k] > sort[l])
				{
					min = sort[k];
					sort[k] = sort[l];
					sort[l] = min;
				}
			}
		}
		printf("<------------------SORTED------------------>\n");
		for(int l = 0; l<19; l++)
		{
			printf("%f\n",sort[l]);
		}

		//SEARCH FOR MIN DIST AND CHECK SAME/DIFFERENT
		double traverse = 0.0;
		int count = 0;
		printf("%f\n",sort[0]);
		printf("%f\n",traverse);
		while(traverse != sort[0])
		{
			traverse = euDist[count];
			//printf("%f\n",traverse);
			count++;
		}
		if(count<5 && i<5 || count>5 && i>55)
			correct++;
	}
	printf("CORRECTNESS: %f\n",(double)correct/10);
